type: edu
custom_name: stage4
files:
- name: src/search/Main.java
  visible: true
  text: "package search;\n\nimport java.util.Scanner;\n\npublic class Main {\n   \
    \ public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\
    \        String str = scanner.nextLine();\n        String word = scanner.nextLine();\n\
    \        \n        String[] words = str.trim().split(\" \");\n        int idx\
    \ = -1;\n        \n        for (int i = 0; i < words.length; i++) {\n        \
    \    if (word.equals(words[i])) {\n                idx = i + 1;\n            \
    \    break;\n            }\n        }\n        \n        if (idx == -1) {\n  \
    \          System.out.println(\"Not found\"); \n        } else {\n           \
    \ System.out.println(idx);    \n        }\n    }\n}\n"
  learner_created: false
- name: test/SimpleSearchEngineTest.java
  visible: false
  text: |+
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.LinkedList;
    import java.util.List;

    class TestClue {
        String input;

        TestClue(String input) {
            this.input = input;
        }
    }

    public class SimpleSearchEngineTest extends StageTest<TestClue> {

        public static final String test1 =
                "2\n" +
                "0";

        public static final String test2 =
                "1\n" +
                "burgess\n" +
                "0";

        public static final String test3 =
                "1\n" +
                "erick\n" +
                "0";

        public static final String test4 =
                "3\n" +
                "1\n" +
                "burgess\n" +
                "2\n" +
                "2\n" +
                "1\n" +
                "erick\n" +
                "0";

        public static final String test5 =
                "2\n" +
                "1\n" +
                "@\n" +
                "1\n" +
                "this text never find some match\n" +
                "2\n" +
                "0";

        public static final String test6 =
                "0";

        public static final String test7 =
                "1\n" +
                "this text never find some match\n" +
                "0";

        public static final String test8 =
            "1\n" +
            "h\n" +
            "2\n" +
            "1\n" +
            "@gmail.com\n" +
            "0";

        public static final String test9 =
            "4\n" +
            "2\n" +
            "2\n" +
            "1\n" +
            "this text never gonna be matched\n" +
            "1\n" +
            "h\n" +
            "1\n" +
            "@GMAIL\n" +
            "0";

        @Override
        public List<TestCase<TestClue>> generate() {

            List<TestCase<TestClue>> tests = new ArrayList<>();

            for (String input : new String[]{
                test1, test2, test3, test4, test5, test6, test7, test8, test9}) {

                tests.add(new TestCase<TestClue>()
                    .setAttach(new TestClue(input))
                    .setInput(input)
                    .addArguments("--data", "names.txt")
                    .addFile("names.txt", SearchEngineTests.NAMES));
            }

            return tests;
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String cR = "\n";
            List<String> outputLines = new LinkedList<String>(Arrays.asList(reply.split(cR)));
            String[] inputLines = clue.input.split(cR);
            String[] reference;
            String[] idealSearchResult;

            reference = SearchEngineTests.NAMES.split("\n");

            //clear the list of unnecessary lines, if any
            List<String> cleanedOutput = new ArrayList<String>();
            for (int i = 0; i < outputLines.size(); i++) {
                if (containsItemFromList(outputLines.get(i), reference)) {
                    cleanedOutput.add(outputLines.get(i));
                }
            }

            int currentInputLine = 0;
            int currentOutputLine = 0;

            int actionType = -1;

            int searchIteration = 1;
            int fullOutputIteration = 1;

            while (actionType != 0) {
                try {
                    actionType = Integer.parseInt(inputLines[currentInputLine]);
                } catch (NumberFormatException e) {
                    return new CheckResult(false,
                        "The number of menu item must be number!");
                }

                switch (actionType) {
                    case 1:
                        currentInputLine++;

                        String toSearch = inputLines[currentInputLine];

                        currentInputLine++;

                        idealSearchResult = Arrays.stream(reference)
                            .filter(line -> line.toLowerCase()
                                .contains(toSearch.toLowerCase().trim()))
                            .toArray(String[]::new);

                        String[] currentSearchResult = new String[idealSearchResult.length];
                        for (int i = 0; i < currentSearchResult.length; i++) {
                            try {
                                currentSearchResult[i] = cleanedOutput.get(currentOutputLine);
                            } catch (IndexOutOfBoundsException e) {
                                return new CheckResult(false,
                                    "Seems like you output less than expected. " +
                                        "Either you've lost someone in the printing of all " +
                                        "people, or you haven't printed all the necessary " +
                                        "people in the search.");
                            }
                            currentOutputLine++;
                        }

                        Arrays.sort(currentSearchResult);
                        Arrays.sort(idealSearchResult);

                        if (!Arrays.equals(currentSearchResult, idealSearchResult)) {
                            return new CheckResult(false,
                                "Search result is not equal " +
                                    "to the expected search");
                        }

                        searchIteration++;
                        break;
                    case 2:
                        currentInputLine++;

                        String[] currentAll = new String[reference.length];
                        for (int i = 0; i < currentAll.length; i++) {
                            try {
                                currentAll[i] = cleanedOutput.get(currentOutputLine);
                            } catch (IndexOutOfBoundsException e) {
                                return new CheckResult(false,
                                    "Seems like you output less than expected. " +
                                        "Either you've lost someone in the printing of all " +
                                        "people, or you haven't printed all the necessary " +
                                        "people in the search.");
                            }
                            currentOutputLine++;
                        }

                        Arrays.sort(currentAll);
                        Arrays.sort(reference);

                        if (!Arrays.equals(currentAll, reference)) {
                            return new CheckResult(false,
                                "Looks like you're printing " +
                                    "unknown people when you enter option 2.");
                        }

                        fullOutputIteration++;
                        break;
                    case 0:
                        return CheckResult.correct();
                    default:
                        currentInputLine++;
                        break;
                }
            }

            return CheckResult.correct();
        }

        private static boolean containsItemFromList(String inputStr, String[] items) {
            return Arrays.stream(items).parallel().anyMatch(inputStr::contains);
        }
    }

  learner_created: false
- name: src/search/SearchEngine.java
  visible: true
  text: |
    package search;

    import java.io.File;
    import java.io.FileNotFoundException;
    import java.util.ArrayList;
    import java.util.Scanner;

    public class SearchEngine {

        public void start(String fileName) {
            ArrayList<String> lines = new ArrayList<>();
            lines = fillDataFromFile(fileName);

            Scanner scanner = new Scanner(System.in);
    /*        System.out.println("Enter the number of people:");
            int nLines = scanner.nextInt();
            scanner.nextLine();
            ArrayList<String> lines = new ArrayList<>();
            System.out.println("Enter all people:");

            for (int i = 0; i < nLines; i++) {
                lines.add(scanner.nextLine());
            }*/

            boolean isContinued = true;

            while(isContinued) {
                System.out.println();
                System.out.println("=== Menu ===");
                System.out.println("1. Find a person");
                System.out.println("2. Print all people");
                System.out.println("0. Exit");
                int choice = scanner.nextInt();

                switch (choice) {
                    case 0 :
                        System.out.println();
                        System.out.println("Bye!");
                        isContinued = false;
                        break;
                    case 1 :
                        System.out.println();
                        findPerson(lines);
                        break;
                    case 2 :
                        System.out.println();
                        printAllPeople(lines);
                        break;
                    default:
                        System.out.println();
                        System.out.println("Incorrect option! Try again.");
                        break;
                }
            }
        }

        private ArrayList<String> fillDataFromFile(String fileName) {
            ArrayList<String> res = new ArrayList<>();
            File file = new File(fileName);

            try (Scanner scanner = new Scanner(file)) {
                while (scanner.hasNext()) {
                    res.add(scanner.nextLine());
                }
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }

            return res;
        }

        private void findPerson(ArrayList<String> lines) {
            System.out.println("Enter a name or email to search all suitable people.");
            Scanner scanner = new Scanner(System.in);
            String searchWord = scanner.nextLine();
            searchWord = searchWord.toLowerCase();
            ArrayList<String> foundedLines = new ArrayList<>();

            for (String str : lines) {
                String targetStr = str.trim().toLowerCase();
                if (targetStr.contains(searchWord)) {
                    foundedLines.add(str);
                }
            }

            if (foundedLines.size() != 0) {
                System.out.println("=== List of people ===");
                for (String str : foundedLines) {
                    System.out.println(str);
                }
            } else {
                System.out.println("No matching people found.");
            }
        }

        private void printAllPeople(ArrayList<String> lines) {
            System.out.println("=== List of people ===");
            for (String str : lines) {
                System.out.println(str);
            }
        }


        public void find() {
            Scanner scanner = new Scanner(System.in);
            System.out.println("Enter the number of people:");
            int nLines = scanner.nextInt();
            scanner.nextLine();
            ArrayList<String> lines = new ArrayList<>();
            System.out.println("Enter all people:");

            for (int i = 0; i < nLines; i++) {
                lines.add(scanner.nextLine());
            }

            System.out.println();
            System.out.println("Enter the number of search queries:");
            int nQueries = scanner.nextInt();
            scanner.nextLine();

            for (int i = 0; i < nQueries; i++) {
                System.out.println();
                System.out.println("Enter data to search people:");
                String searchWord = scanner.nextLine();
                searchWord = searchWord.toLowerCase();

                ArrayList<String> foundedLines = new ArrayList<>();
    /*            for (String str : lines) {
                    String[] wordsInStr = str.trim().toLowerCase().split(" ");
                    for (int j = 0; j < wordsInStr.length; j++) {
                        if (searchWord.equals(wordsInStr[j])) {
                            foundedLines.add(str);
                            break;
                        }
                    }
                }*/

                for (String str : lines) {
                    String targetStr = str.trim().toLowerCase();
                    if (targetStr.contains(searchWord)) {
                        foundedLines.add(str);
                    }
                }

                if (foundedLines.size() != 0) {
                    System.out.println();
                    System.out.println("Found people:");
                    for (String str : foundedLines) {
                        System.out.println(str);
                    }
                } else {
                    System.out.println("No matching people found.");
                }
            }
        }

        public void foo() {
            Scanner scanner = new Scanner(System.in);
            String str = scanner.nextLine();
            String word = scanner.nextLine();

            String[] words = str.trim().split(" ");
            int idx = -1;

            for (int i = 0; i < words.length; i++) {
                if (word.equals(words[i])) {
                    idx = i + 1;
                    break;
                }
            }

            if (idx == -1) {
                System.out.println("Not found");
            } else {
                System.out.println(idx);
            }
        }
    }
  learner_created: true
- name: test/SearchEngineTests.java
  visible: false
  text: |
    public class SearchEngineTests {
        public static final String NAMES = "Kristofer Galley\n" +
            "Fernando Marbury fernando_marbury@gmail.com\n" +
            "Kristyn Nix nix-kris@gmail.com\n" +
            "Regenia Enderle\n" +
            "Malena Gray\n" +
            "Colette Mattei\n" +
            "Wendolyn Mcphillips\n" +
            "Jim Gray\n" +
            "Coreen Beckham\n" +
            "Bob Yeh bobyeah@gmail.com\n" +
            "Shannan Strope stropeshah@gmail.com\n" +
            "Yer Fillion\n" +
            "Margene Resendez marres@gmail.com\n" +
            "Blossom Ambler\n" +
            "Teri Ledet teri_ledet@gmail.com\n" +
            "Dana Baron baron@gmail.com\n" +
            "Abram Goldsberry\n" +
            "Yer Leopold\n" +
            "Stefania Trunzo\n" +
            "Alexis Leopold\n" +
            "Carlene Pompa\n" +
            "Oliver Dacruz\n" +
            "Jonie Richter\n" +
            "Pasquale Gallien gallien@evilcorp.com\n" +
            "Verdie Gentle\n" +
            "Gerardo Strouth gallien@evilcorp.com\n" +
            "Agripina Dones\n" +
            "Latricia Niebuhr\n" +
            "Malena Schommer\n" +
            "Drema Leopold\n" +
            "Heide Payeur\n" +
            "Ranae Digiovanni\n" +
            "Simona Pereira\n" +
            "Nick Digiovanni\n" +
            "Angelita Wigington gallien@evilcorp.com\n" +
            "Elin Gray\n" +
            "Dwain Trunzo\n" +
            "Boris Beiler\n" +
            "Remi Malek fsociefy@gmail.com\n" +
            "Demetria Hostetler gallien@evilcorp.com\n" +
            "Nydia Mcduffie\n" +
            "Florencio Defibaugh\n" +
            "Warner Giblin\n" +
            "May Mans\n" +
            "Shu Gray\n" +
            "Kaycee Gray\n" +
            "Victorina Froehlich victory@gmail.com\n" +
            "Roseanne Gray\n" +
            "Erica Radford hisam@gmail.com\n" +
            "Elyse Pauling";
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/66/stages/357/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 27 Nov 2021 04:32:22 UTC
record: 4
